from mage_ai.data_cleaner.transformer_actions.base import BaseAction
from mage_ai.data_cleaner.transformer_actions.constants import ActionType, Axis
from mage_ai.data_cleaner.transformer_actions.utils import build_transformer_action
from pandas import DataFrame
import pandas as pd

if 'transformer' not in globals():
    from mage_ai.data_preparation.decorators import transformer
if 'test' not in globals():
    from mage_ai.data_preparation.decorators import test

def investigate_outliers(data: DataFrame, c: str):
    q1 = data[c].quantile(0.25)
    q3 = data[c].quantile(0.75)
    iqr = q3 - q1
    ll = q1 - 1.5 * iqr
    ul = q3 + 1.5 * iqr

    # Vectorized counting of outliers (without creating intermediate DataFrames)
    outliers_lower = (data[c] < ll).sum()
    outliers_upper = (data[c] > ul).sum()
    num_outliers = outliers_lower + outliers_upper

    return {'col': c, 'n_outliers': num_outliers, 'll': ll, 'ul': ul, 'q1': q1, 'q3': q3}

def remove_outliers_iqr(df: DataFrame) -> DataFrame:
    clean_data = df.copy()
    
    # Precompute the outlier information for each column
    outlier_info = {
        col: investigate_outliers(clean_data, col)
        for col in clean_data.columns if col not in ["Unnamed: 0", "timestamp", "COMP", 'status']
    }

    # Use a mask for filtering rows in a vectorized manner
    mask = pd.Series([True] * len(clean_data))

    # Apply filtering for columns with outliers
    for col, cue in outlier_info.items():
        if cue['n_outliers'] > 0 and cue['q1'] != cue['q3']:
            print(f"Dropping {cue['n_outliers']} outliers from column {col}")
            mask &= (clean_data[col] > cue['ll']) & (clean_data[col] < cue['ul'])

    clean_data = clean_data[mask]

    print(f"{clean_data.shape[0]} samples left after dropping outliers\n")
    return clean_data

@transformer
def transformer_action(df: DataFrame, *args, **kwargs) -> DataFrame:
    """
    Execute Transformer Action: ActionType.REMOVE_OUTLIERS

    Warning: This method uses relative outlier checks, and so repeated executions of this
    transformer action will continue to remove data.

    Docs: https://docs.mage.ai/guides/transformer-blocks#remove-outliers
    """
    initial_row_count = len(df)
    
    if '_timestamp' in df.columns:
        df = df.drop(columns=['_timestamp'])
        print(f"Column '_timestamp' dropped. Remaining columns: {df.columns}")
    
    # Remove outliers using IQR method
    df_no_outliers = df

    final_row_count = len(df_no_outliers)
    removed_rows = initial_row_count - final_row_count
    print(f"Number of rows removed: {removed_rows}")
    
    return df_no_outliers


@test
def test_output(output, *args) -> None:
    """
    Template code for testing the output of the block.
    """
    assert output is not None, 'The output is undefined'