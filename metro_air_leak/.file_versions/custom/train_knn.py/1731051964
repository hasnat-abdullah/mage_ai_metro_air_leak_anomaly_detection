from pandas import DataFrame
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, ConfusionMatrixDisplay

if 'custom' not in globals():
    from mage_ai.data_preparation.decorators import custom
if 'test' not in globals():
    from mage_ai.data_preparation.decorators import test


@custom
def transform_feature_selection(df: DataFrame, *args, **kwargs):
    """
    args: The output from any upstream parent blocks (if applicable)

    Returns:
        Anything (e.g. data frame, dictionary, array, int, str, etc.)
    """
    x = df.iloc[:, 2:-1]
    y = df.iloc[:, -1]
    print(x.head)
    print(y.head)

    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)

    knn = KNeighborsClassifier(n_neighbors=5)
    knn.fit(X_train,y_train)
    y_pred = knn.predict(X_test)
    cm = confusion_matrix(y_test, y_pred)
    # x_train = get_selected_features_x_df(x_train, y_train, rf)
    
    
    #train randorm forest
    rf.fit(x_train, y_train)
    selected_features = x_train.columns
    #EValuate the result of new features
    y_pred_forest = rf.predict(x_test[selected_features])
    accuracy = accuracy_score(y_test, y_pred_forest)

    print("Random Forest Classifier:")
    print(classification_report(y_test, y_pred_forest))
    conf_matrix_forest = confusion_matrix(y_test, y_pred_forest)
    disp_forest = ConfusionMatrixDisplay(conf_matrix_forest, display_labels=rf.classes_)
    disp_forest.plot(cmap='Blues', values_format='d')
    plt.show()


@test
def test_output(output, *args) -> None:
    """
    Template code for testing the output of the block.
    """
    assert output is not None, 'The output is undefined'
