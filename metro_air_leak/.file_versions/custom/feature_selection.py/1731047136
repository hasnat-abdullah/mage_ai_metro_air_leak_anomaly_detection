from pandas import DataFrame

if 'custom' not in globals():
    from mage_ai.data_preparation.decorators import custom
if 'test' not in globals():
    from mage_ai.data_preparation.decorators import test

def select_feature():
    num_features_to_select = 7

    num_features = len(X_train.columns.tolist())
    looped_X_train = X_train.copy()

    while num_features> num_features_to_select:
    n1 = num_features-1
    n2 = num_features-2
    sfe = SequentialFeatureSelector(estimator=rf, n_features_to_select=n1, direction = 'forward', n_jobs = -1)
    sbe = SequentialFeatureSelector(estimator=rf, n_features_to_select=n2, direction = 'backward', n_jobs= -1)
    #Eliminating Features with Forward pass
    sfe.fit(looped_X_train, y_train)
    sfe_features = looped_X_train.columns[sfe.support_].tolist()
    looped_X_train = looped_X_train[sfe_features]
    #Eliminating Features with Backward pass
    sbe.fit(looped_X_train, y_train)
    sbe_features = looped_X_train.columns[sbe.support_].tolist()
    looped_X_train = looped_X_train[sbe_features]

    num_features = len(looped_X_train.columns.tolist())

    selected_features = looped_X_train.columns
    print(f"List of selected features:\n {', '.join(selected_features)}")

@custom
def transform_feature_selection(df: DataFrame, *args, **kwargs):
    """
    args: The output from any upstream parent blocks (if applicable)

    Returns:
        Anything (e.g. data frame, dictionary, array, int, str, etc.)
    """
    x = df.iloc[:, 2:-1]
    y = df.iloc[:, -1]
    print(x.head)
    print(y.head)

    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)
    best_params = {'max_depth': 20, 'min_samples_leaf': 1, 'min_samples_split': 2, 'n_estimators': 50}
    rf = RandomForestClassifier(oob_score=True, random_state=42, **best_params)

    return {}


@test
def test_output(output, *args) -> None:
    """
    Template code for testing the output of the block.
    """
    assert output is not None, 'The output is undefined'
